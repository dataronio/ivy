.TH ivycc 1 "July 21, 2008"
.LO 1
.SH NAME
ivycc - Ivy C Compiler
.SH SYNOPSIS

\fBivycc\FR [\fB--deputy\fR] [\fB--heapsafe\fR] [\fB--sharc\fR] [\fB--version\fR] [\fB--help\fR]
    [\fB--gcc=\fIexecutable\fR] [\fB--envmachine\fR] [\fB--multiple-errors\fR]
    [\fB--ivylib=\fIfile\fR] [\fB--nolibs\fR] [\fB--patch=\fIfile\fR] [\fB--nopatch\fR]
    [\fB--verbose\fR] [\fB--stats\fR] [\fB--save-temps\fR[\fB=\fIdir\fR]] [\fB--trace\fR]
    [\fB--dp-...\fR] [\fB--hs-...\fR] [\fB--sc-...\fR]
    [any gcc option] \fIfiles\fR...
.SH DESCRIPTION

\fBivycc\fR compiles C files written using the Ivy dialect of C. \fBivycc\fR
acts as a "drop-in" replacement for \fBgcc\fR, compiling and/or linking 
the argument files, and accepting any gcc option.

Ivy is a set of safety-oriented extensions to C: type safety (Deputy),
deallocation safety (HeapSafe), correct sharing of concurrent data
structures (SharC); these extensions can be used independently or in
any combination. The Ivy extensions are designed to be non-intrusive:
Ivy code can be compiled with a regular C compiler with an appropriate
header file. Ivy is implemented as a C-to-C compiler using \fBgcc\fR
as its backend, and currently supports Linux and Mac OS X.

Deputy enforces type and memory safety.  The programmer must add type
annotations that describe, for example, the bounds of each pointer in
terms of other program variables.  Deputy uses static analysis and
run-time checks to enforce safety based on these annotations.

HeapSafe checks that a program uses ``free`` safely, with low time and
space overheads.  HeapSafe uses reference counting and an extended
memory management API to check deallocations.

SharC is a tool for checking that data is shared in a sensible way in
multithreaded C programs. Programmers explicitly declare a strategy
for the sharing of objects in their program. SharC then uses a
combination of compile- and run-time checking to ensure that the program
adheres to this strategy.

For full documentation on these extension please see our web page at
\fBhttp://ivy.cs.berkeley.edu\fR.
.SH GENERAL OPTIONS

\fBivycc\fR accepts all \fBgcc\fR options, and some additional
Ivy-specific options:

.TP
\fB--deputy\fR
Enable Deputy type-safety extensions.
.TP
\fB--heapsafe\fR
Enable HeapSafe deallocation-safety extensions.
.TP
\fB--sharc\fR 
Enable SharC concurrency-safety extensions.
.TP
\fB--version\fR 
Print version number and exit.
.TP
\fB--help\fR
Print option summary and exit.
.TP
\fB--gcc=\fIexecutable\fR 
Use \fIexecutable\fR instead of \fBgcc\fR to preprocess files, and
compile the C code generated by Ivy - useful in combination with
--envmachine for cross-compiling Ivy code.
.TP
\fB--envmachine\fR
Use machine model specified in CIL_MACHINE environment variable (see
description below).
.TP
\fB--multiple-errors\fR
Continue compiling after first error.
.TP
\fB--ivylib=\fIfile\fR
Use a specific runtime library from the Ivy installation (in .../lib/ivy/lib).
Can be used multiple times to use multiple libraries.
.TP
\fB--nolibs\fR 
Do not link with the default Ivy runtime libraries.
.TP
\fB--patch=\fIfile\fR 
Specify a patch file containing additional Ivy annotations.
.TP
\fB--nopatch\fR
Do not use the default Ivy patch files.
.TP
\fB--verbose\fR 
Enable verbose output.
.TP
\fB--stats\fR 
Print compile-time statistics.
.TP
\fB--save-temps\fR[\fB=\fIdir\fR] 
Save intermediate compilation files in the current directory, or in \fBdir\fR.
.TP
\fB--trace\fR
Print compilation commands as they are executed.
.TP
\fB--dp-...\fR 
Deputy-specific options, see below.
.TP
\fB--hs-...\fR 
HeapSafe-specific options, see below.
.TP
\fB--sc-...\fR
SharC-specific options, see below.
.SH DEPUTY OPTIONS
.TP
\fB--dp-warn-asm\fR
Show warnings when assembly is ignored.
.TP
\fB--dp-warn-vararg\fR
Show warnings when vararg operators are ignored.
.TP
\fB--dp-trust\fR
Trust all bad casts by default
.TP
\fB--dp-strict-global-init\fR
Report an error, instead of a warning, if global
initializer code can't be proved statically safe.
.TP
\fB--dp-assume-string\fR
Assume all char arrays, and all unannotated char*s in function types, are NT.
.TP
\fB--dp-no-infer\fR
Don't use interprocedural analysis to determine kinds for unannotated pointers.
.TP
\fB--dp-count-trusted-lines\fR
Report how many source lines contain an operation
that is TRUSTED.
.TP
\fB--dp-flids\fR
Store verbose failure information in file and
replace with fault location identifier (FLID) (use
this with a custom version of deputy checks)
.TP
\fB--dp-ops\fR
Specify a custom file defining the deputy runtime checks
.TP
\fB--dp-opt\fR
Control deputy optimizations:
                              0: no optimization
                              1: flow-insensitive optimization
                              2: some flow-sensitive optimization
                              3: all optimizations (default)
                              4: use Mine's octagon analysis
.TP
\fB--dp-fail-stop\fR
Optimize checks assuming that we stop on error
.TP
\fB--dp-fast-checks\fR
Optimize checks assuming that we stop on error without printing
specifics about the failure
.SH HEAPSAFE OPTIONS

.TP
\fB--hs-debug\fR
Tell HeapSafe to tracks pointers accurately, allowing you to find the 
source of all pointers to a given object. This helps in debugging memory
management problems, at a significant performance cost (up to 4x slowdown).
.TP
\fB--hs-norc\fR
Disable reference counting.
.TP
\fB--hs-concrc\fR
Enable concurrent reference counting.
.TP
\fB--hs-warn-typeof-char\fR
Warn when \fBhs_typeof\fR is applied to the \fBchar\fR type. This can be
helpful when porting programs to HeapSafe (see the HeapSafe documentation).
.TP
\fB--hs-saveadjust=\fIdir\fR
Save the adjust functions generated by HeapSafe in directory \fIdir\fR.
This allows you to single step through adjust functions in a debugger 
(you will typically have to add \fIdir\fR to your debugger's search path, e.g.,
with \fBgdb\fR's \fBdir\fR command).
.TP
\fB--hs-fakeadjust=\fIdir\fR
Normally HeapSafe will refuse to automatically generate adjust
functions for types containing unions containing pointers. With this
option selected, HeapSafe will generate incorrect adjust functions for
such types, and save them to directory \fIdir\fR.  These incorrect
functions can be a useful starting point for writing your own, correct
adjust function for these types.

Use \fB--hs-fakeadjust\fR only for this purpose, never use it for code that you
intend to run.
.TP
\fB--hs-ops=\fIheader\fR
Normally the HeapSafe generated code includes a header file called \fBrcops.h\fR
in its generated C code. This file defines various internal operations used
for reference counting. Use this option to specify an alternate header file.
.SH SHARC OPTIONS

.TP
.TP
\fB--sc-ops\fR
Specify custom operations for the sharC instrumentation
.TP
\fB--sc-infer-sharing\fR
Perform global SPRIVATE and SDYNAMIC inference. The argument must be
the root of your build tree.
.SH MACHINE MODEL

The \fB--envmachine\fR option allows \fBivycc\fR to be configured for a new
platform without requiring source code changes. It allows
specification of a target's data layout rules. It is typically used in combination
with \fB-gcc\fR, to specify a cross-compiler.

When \fB--envmachine\fR is specified, the compilation uses a machine
specification described in the environment variable \fBCIL_MACHINE\fR,
which is a list of ke/value pairs separated by spaces. The values may
tuples separated by commas (no spaces allowed). For instance,

  short=2,1, int=2,1 long=4,1 long_long=8,1 big_endian=false ...

A particular order to the keys in CIL_MACHINE is not necessary, but
all the keys in the table below must be specified. Unknown keys are ignored.

.nf
        \fIKey\fR                     \fIValue\fR
        big_endian              bool
        short                   size,alignment
        int                     size,alignment
        long                    size,alignment
        long_long               size,alignment
        pointer                 size,alignment
        enum                    size,alignment
        float                   size,alignment
        double                  size,alignment
        long_double             size,alignment
        fun                     size,alignment
        void                    size
        alignof_string          alignment
        max_alignment           alignment
        size_t                  string
        wchar_t                 string
        char_signed             bool
        underscore_name         bool
        const_string_literals   bool
        __thread_is_keyword     bool
        __builtin_va_list       bool

.fi
Sizes and alignments are integers. The size_t and wchar_t strings must be the names
of the size_t and wchar_t types, with spaces replaced by underscores (e.g.,
size_t=unsigned_int).

.SH EXAMPLES

Compile one of HeapSafe's test applications with accurate pointer tracking:
.IP
ivycc --heapsafe --hs-debug -o qsort2 qsort2.c
.SH PREPOCESSOR SYMBOLS

\fBivycc\fR defines the following preprocessor symbol(s):
.TP
\fB__IVY__\fR
This symbol is defined to Ivy's version. Ivy version x.y.z is represented as
x*10000 + y * 100 + z. For instance, for version 1.0.0, __IVY__=10000.
.TP
\fB__DEPUTY__\fR
This symbol is defined to 1 if Deputy is enabled.
.TP
\fB__HEAPSAFE__\fR
This symbol is defined to 1 if HeapSafe is enabled.
.TP
\fB__SHARC__\fR
This symbol is defined to 1 if SharC is enabled.
.TP
\fB__HS_DEBUG__\fR
This symbol is defined to 1 if the \fB--hs-debug\fR option is used.
.TP
\fB__HS_NOCONCRC__\fR
This symbol is defined to 1 if concurrent reference-counting is not enabled.
.SH ENVIRONMENT VARIABLES

.TP
.B CIL_MACHINE
This variable specifies the machine model to assume at compile-time - see the
MACHINE MODEL section.
.TP
.B HEAPSAFE
This variable sets some runtime options for programs using HeapSafe. See
the HeapSafe documentation for a full description.
.TP
.B SHARC
This variable sets some runtime options for programs using SharC. See
the HeapSafe documentation for a full description.
.SH SEE ALSO

.IR gcc (1),
platform-specific gcc

Ivy documentation at http://ivy.cs.berkeley.edu
.SH AUTHORS
Ivy was written by Jeremy Condit <jcondit@cs.berkeley.edu>, Matthew
Harren <matth@cs.berkeley.edu>, Zachary Anderson <zra@cs.berkeley.edu>,
George C. Necula <necula@cs.berkeley.edu>, David Gay <david.e.gay@intel.com>
and Robert Ennals <robert.ennals@intel.com>.

